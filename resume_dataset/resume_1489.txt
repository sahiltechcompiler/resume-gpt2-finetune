Phone Number: +91 7289951145 | Email: roy.devashish94@gmail.com | GitHub | LinkedIn Devashish Roy EDUCATION Manipal University Jaipur (MUJ), Rajasthan B.Tech. Computer Science Engineering (CSE) N.K. Bagrodia Public School, Dwarka, New Delhi 12th Central Board of Secondary Education (CBSE) 10th Central Board of Secondary Education (CBSE) SKILLS Grad: 2025 (expected) CGPA: 7.68 Grad: 2021 Aggregate: 92.26% Aggregate: 92.26% Java | Javascript | Go | ReactJS | ExpressJS | SpringBoot | MySQL | MongoDB | Docker | AWS | Jenkins | Linux | Git EXPERIENCE Edomb Software Developer Intern April 2024 - July 2024  Developed a Genetic Algorithm based Time Table generation system for schools in JavaScript, optimizing scheduling under multiple constraints.  Migrated the Auth service from JavaScript to TypeScript, leading to fewer runtime errors and more efficient development cycles.  Built comprehensive user interfaces using React and Ant Design ensuring a responsive UI that improved accessibility.  Implemented state management with Redux Toolkit and RTK Query, resulting in faster data retrieval.  Reduced load times by 40% through route-based code splitting and minimized data transfer by 91%.  Optimized image assets, achieving an 71% decrease in load times by reducing sizes by 82%. Manipal University Jaipur SDC Software Developer Intern  Developed backend for Travel Buddy a carpooling app for MUJ Students using Node.js and MongoDB.  Migrated server from Render to AWS reducing cold start times by 99% improving response times by 85%.  Authored API Docs using Swagger facilitating seamless integration with the Web and the Mobile teams.  Contributed to the Web frontend by creating components in React, enhancing overall user experience. Jan 2024 - June 2024 PROJECTS Stream Box (Link | Github) Developed a scalable video streaming platform with microservices architecture and event-driven design. Java, Spring Boot, React, MySQL, Docker, Kafka, AWS  Engineered a robust backend using Spring Boot microservices, improving system modularity and scalability.  Used Spring Gateway for efficient load balancing & centralized authentication, enhancing security & performance.  Implemented Eureka for service discovery to dynamically manage and locate microservices.  Utilized Feign Client for seamless inter-service communication, simplifying API interactions between microservices.  Employed MySQL to orchestrate data across microservices, ensuring reliable and scalable data management.  Implemented Kafka for asynchronous processing, enabling efficient video encoding and quality adaptation.  Containerized the infrastructure with Docker Compose, streamlining deployment and management of services.  Leveraged AWS cloud infrastructure for deployment, ensuring high availability and scalability.  Developed a responsive frontend using React with Redux Toolkit, improving user experience and state management. Squeeze Box (Link | GitHub) Created an efficient Image Compression tool using Go and React for batch image processing to target sizes. Go, React, AWS, NGINX, Jenkins, Docker  Developed the backend and core compression logic in Go, leveraging Gos native packages.  Improved processing speed by 39.66% through concurrent processing with goroutines with worker pool pattern.  Reduced iteration times by 44.54% using a Binary Search algorithm to rapidly converge on target size.  Integrated NGINX on EC2 for enhanced routing and delivery of the React frontend..  Utilized TailwindCSS for streamlined and responsive UI development in React.  Leveraged Docker for streamlined local development.  Automated builds with Jenkins for continuous integration and deployment.